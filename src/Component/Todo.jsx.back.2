import React, { useState, useEffect } from "react";
import { Styler } from "./Styler";

function TodoList() {
  const [todos, setTodos] = useState([]);
  const [inputValue, setInputValue] = useState("");
  const [editIndex, setEditIndex] = useState(null);
  const [editedValue, setEditedValue] = useState("");
  const [priority, setPriority] = useState("Low");
  const [dragOverIndex, setDragOverIndex] = useState(null);

  useEffect(() => {
    Styler(); // TenoxUI Styler Function
  }, [todos, editIndex]);

  useEffect(() => {
    const storedTodos = localStorage.getItem("todos");
    if (storedTodos) {
      setTodos(JSON.parse(storedTodos));
    }
  }, []);

  const saveTodosToLocalStorage = (todos) => {
    localStorage.setItem("todos", JSON.stringify(todos));
  };

  const addTodo = () => {
    if (inputValue.trim() !== "") {
      const newTodo = {
        text: inputValue,
        priority: priority,
        timeAdded: new Date().toLocaleString(),
      };
      setTodos([...todos, newTodo]);
      saveTodosToLocalStorage([...todos, newTodo]);
      setInputValue("");
    }
  };

  const removeTodo = (index) => {
    const newTodos = [...todos];
    newTodos.splice(index, 1);
    setTodos(newTodos);
    saveTodosToLocalStorage(newTodos);
  };

  const editTodo = (index) => {
    setEditIndex(index);
    setEditedValue(todos[index].text);
    // Call Styler again when entering edit mode
    Styler();
  };

  const updateTodo = () => {
    const newTodos = [...todos];
    newTodos[editIndex].text = editedValue;
    setTodos(newTodos);
    saveTodosToLocalStorage(newTodos);
    setEditIndex(null);
    setEditedValue("");
  };

  const handleDragStart = (e, index) => {
    e.dataTransfer.setData("text/plain", index);
  };

  const handleDragEnter = (e, targetIndex) => {
    e.preventDefault();
    setDragOverIndex(targetIndex);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setDragOverIndex(null);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };
  const handleDrop = (e, targetIndex) => {
    const draggedIndex = parseInt(e.dataTransfer.getData("text/plain"));
    if (draggedIndex !== targetIndex) {
      const newTodos = [...todos];
      const draggedTodo = newTodos[draggedIndex];
      newTodos.splice(draggedIndex, 1);
      newTodos.splice(targetIndex, 0, draggedTodo);
      setTodos(newTodos);
      saveTodosToLocalStorage(newTodos);
    }
    setDragOverIndex(null);
  };

  const priorityStyle = (priority) => {
    switch (priority) {
      case "High":
        return {
          tc: "tc-[danger-500]",
          bg: "bg-[danger-600]",
        };
      case "Medium":
        return {
          tc: "tc-[warning-500]",
          bg: "bg-[warning-600]",
        };
      case "Low":
        return {
          tc: "tc-[success-500]",
          bg: "bg-[success-600]",
        };
      default:
        return { tc: "", bg: "" };
    }
  };

  return (
    <div>
      <header>
        {/* h1 with red color */}
        <h1 className="logo">TodoList </h1>
        <p>Simple todolist project</p>
      </header>
      <div className="center gap-1rem p-1rem bw-1px bs-solid bc-[primary-800] br-8px mt-1rem">
        <input
          className="all-unset w-100%"
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder="Enter todo..."
        />
        <div className="center gap-6px">
          <span className="mi-round fs-20px">expand_more</span>
          <select
            className="all-unset"
            onChange={(e) => setPriority(e.target.value)}
          >
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
          </select>
        </div>
<div className="bg-[primary-700] w-1px h-20px br-2rem"></div>
        <button className="icon w-mn-1.4rem" onClick={addTodo}>
          <span className="ms-round">add</span>
        </button>
      </div>
      {/* Todo wrapper */}
      <div className="display-flex fd-column gap-1rem mt-1rem fx-wrap-wrap">
        {todos.map((todo, index) => (
          <div key={index}>
            {editIndex === index ? (
              <div
                className={`todo-item ${
                  dragOverIndex === index ? "drag-over" : ""
                }`}
                draggable="true"
                onDragStart={(e) => handleDragStart(e, index)}
                onDragEnter={(e) => handleDragEnter(e, index)}
                onDragOver={(e) => handleDragOver(e)}
                onDragLeave={(e) => handleDragLeave(e)}
                onDrop={(e) => handleDrop(e, index)}
              >
                <input className="edit-input"
                  type="text"
                  value={editedValue}
                  onChange={(e) => setEditedValue(e.target.value)}
                />
                <div className="display-flex gap-1rem ai-center jc-end">
                  <button className="icon" onClick={updateTodo}>
                    <span className="ms-round fs-inherit">save</span>
                  </button>
                  <button
                    className="icon"
                    onClick={() => {
                      setEditIndex(null);
                      setEditedValue("");
                    }}
                  >
                    <span className="ms-round fs-inherit">close</span>
                  </button>
                </div>
              </div>
            ) : (
              <div
                className={`todo-item ${
                  dragOverIndex === index ? "drag-over" : ""
                }`}
                draggable="true"
                onDragStart={(e) => handleDragStart(e, index)}
                onDragEnter={(e) => handleDragEnter(e, index)}
                onDragOver={(e) => handleDragOver(e)}
                onDragLeave={(e) => handleDragLeave(e)}
                onDrop={(e) => handleDrop(e, index)}
              >
                <div className="center space-between gap-1rem">
                  <h2>{todo.text}</h2>
                  <div
                    className={`${priorityStyle(todo.priority).tc} ${
                      priorityStyle(todo.priority).bg
                    } fs-12px p-4px br-4px center gap-4px`}
                  >
                    <span className="ms-round fs-14px">priority</span>{" "}
                    {todo.priority}
                  </div>
                </div>

                <div className="display-flex gap-1rem ai-center jc-end">
                  <p className="mr-auto fs-12px">{todo.timeAdded}</p>
                  <button className="icon" onClick={() => editTodo(index)}>
                    <span className="ms-round">edit</span>
                  </button>
                  <button className="icon" onClick={() => removeTodo(index)}>
                    <span className="ms-round">delete</span>
                  </button>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
      {/* Wrapper todo */}
    </div>
  );
}

export default TodoList;
